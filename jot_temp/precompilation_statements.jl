precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.IOStream, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.something), Nothing, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.promote_rule), Type{Union{Nothing, String}}, Type})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{Nothing, String}}, Type{Union{Nothing, String}}})
precompile(Tuple{Pkg.API.var"#develop##kw", NamedTuple{(:path,), Tuple{String}}, typeof(Pkg.API.develop)})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Nothing, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, String, Vararg{Any}})
precompile(Tuple{Type{Array{Union{Nothing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, String, Nothing}})
precompile(Tuple{Pkg.API.var"##develop#17", Base.PipeEndpoint, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.develop), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Nothing, Nothing, Base.Dict{String, Base.UUID}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Libc.RawFD, IO}, 1}, Base.PipeEndpoint, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Base.SHA1, Base.Dict{String, String}, Base.Dict{String, Base.UUID}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{Pkg.Types.var"##Context#40", Pkg.Types.EnvCache, Base.PipeEndpoint, Bool, Bool, Int64, Array{Pkg.Registry.RegistryInstance, 1}, Base.VersionNumber, Type{Pkg.Types.Context}})
precompile(Tuple{Type{NamedTuple{(:io,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:io,), Tuple{Base.PipeEndpoint}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:io,), Tuple{Base.PipeEndpoint}}})
precompile(Tuple{Pkg.API.var"#develop##kw", NamedTuple{(:io,), Tuple{Base.PipeEndpoint}}, typeof(Pkg.API.develop), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations._resolve), Base.PipeEndpoint, Pkg.Types.EnvCache, Array{Pkg.Registry.RegistryInstance, 1}, Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.PreserveLevel, Base.VersionNumber})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Pkg.Versions.VersionBound}, Pkg.Versions.VersionBound})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Pkg.Versions.semver_interval), Base.RegexMatch})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Versions.VersionRange, 1}, Pkg.Versions.VersionRange})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.hash), Tuple{UInt64}, UInt64})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Pkg.Versions.inequality_interval), Base.RegexMatch})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.PipeEndpoint}}, typeof(Base.sprint), Function, Tuple{Pkg.Versions.VersionSpec}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.PipeEndpoint}}, typeof(Base.sprint), Function, Tuple{String}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.PipeEndpoint}}, typeof(Base.sprint), Function, Tuple{Base.VersionNumber}})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{UInt32, UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{UInt64}, Char})
precompile(Tuple{Type{NamedTuple{(:platform, :julia_version, :io), T} where T<:Tuple}, Tuple{Base.BinaryPlatforms.Platform, Base.VersionNumber, Base.PipeEndpoint}})
precompile(Tuple{Pkg.Operations.var"#download_artifacts##kw", NamedTuple{(:platform, :julia_version, :io), Tuple{Base.BinaryPlatforms.Platform, Base.VersionNumber, Base.PipeEndpoint}}, typeof(Pkg.Operations.download_artifacts), Pkg.Types.EnvCache})
precompile(Tuple{Pkg.Artifacts.var"#ensure_artifact_installed##kw", NamedTuple{(:verbose, :quiet_download, :io), Tuple{Bool, Bool, Base.PipeEndpoint}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64}, Char})
precompile(Tuple{Pkg.Operations.var"#show_update##kw", NamedTuple{(:io,), Tuple{Base.PipeEndpoint}}, typeof(Pkg.Operations.show_update), Pkg.Types.EnvCache, Array{Pkg.Registry.RegistryInstance, 1}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Pkg.Operations.var"#145#152", Base.Order.ForwardOrdering}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Pkg.Operations.var"#145#152", Base.Order.ForwardOrdering}, Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.:(==)), Pkg.Versions.VersionSpec, Pkg.Versions.VersionSpec})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Setfield.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(URIs.__init__)})
precompile(Tuple{typeof(Base.resize!), Array{URIs.RegexAndMatchData, 1}, Int64})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{typeof(HTTP.MultiPartParsing.__init__)})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{Base.var"#pipeline##kw", NamedTuple{(:stderr, :stdout), Tuple{Base.PipeEndpoint, Base.PipeEndpoint}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.Enums.namemap), Type{Jot.JotObservationLabel}})
precompile(Tuple{Type{NamedTuple{(:verbose,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{Base.BottomRF{HTTP.var"#24#25"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{HTTP.var"#24#25"}, Type{Tuple{Union{Type{Union{}}, UnionAll}, UnionAll}}})
precompile(Tuple{typeof(URIs._length_assert)})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:verbose,), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:verbose,), Tuple{Int64}}, Type{NamedTuple{(:headers, :body, :query), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:verbose,), Tuple{Int64}}})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{Type{UInt8}, UInt8})
precompile(Tuple{Base.Colon, UInt8, UInt8})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Jot.start_runtime), String, Function, Type{String}})
precompile(Tuple{Jot.var"##start_runtime#184", Bool, typeof(Jot.start_runtime), String, typeof(append_string_package.append_string), Type{String}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Jot.JotObservationLabel})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, String, Vararg{String}})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{Base.var"##printstyled#917", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{DataType}}, typeof(Base.reduce), Function, Base.Set{Tuple{Union{Type{Union{}}, UnionAll}, UnionAll}}})
precompile(Tuple{Base.var"##mapfoldl#259", Type, typeof(Base.mapfoldl), Function, Function, Base.Set{Tuple{Union{Type{Union{}}, UnionAll}, UnionAll}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), HTTP.var"#24#25", Type, Base.Set{Tuple{Union{Type{Union{}}, UnionAll}, UnionAll}}})
precompile(Tuple{Base.var"##s82#216", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:verbose,), Tuple{Int64}}}})
precompile(Tuple{Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:reached_redirect_limit, :verbose), Tuple{Bool, Int64}}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{-32}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:iofunction, :reached_redirect_limit, :verbose), Tuple{Nothing, Bool, Int64}}}})
precompile(Tuple{Type{Sockets.IPv4}, Int64})
precompile(Tuple{typeof(Base.argtail), Function, Function, Vararg{Function}})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{typeof(HTTP._length_assert)})
precompile(Tuple{Type{NamedTuple{(:port,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:port,), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{typeof(Base.convert), Type{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{NamedTuple{(:n,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:n,), Tuple{Int64}}, Symbol})
precompile(Tuple{Base.var"#84#85", Int64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:verbose, :parent), Tuple{Int64, HTTP.Messages.Response}}}})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.TopRequest.TopLayer{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.DebugRequest.DebugLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}}, String, URIs.URI, Array{Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:iofunction, :reached_redirect_limit, :verbose), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.DebugRequest.DebugLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:iofunction, :reached_redirect_limit, :verbose), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.DebugRequest.DebugLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{HTTP.ConnectionRequest.var"##request#1", Nothing, Type, Int64, Base.Pairs{Symbol, Union{Nothing, Integer}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit, :verbose), Tuple{Nothing, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.DebugRequest.DebugLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Sockets.uv_getaddrinfocb), Ptr{Nothing}, Int32, Ptr{Nothing}})
precompile(Tuple{HTTP.ConnectionPool.var"#getconnection##kw", NamedTuple{(:reuse_limit, :iofunction, :reached_redirect_limit, :verbose), Tuple{Int64, Nothing, Bool, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, UInt64})
precompile(Tuple{typeof(Base.setproperty!), Sockets.TCPSocket, Symbol, Int64})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:iofunction, :reached_redirect_limit, :verbose), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.DebugRequest.DebugLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.DebugRequest.show_io_debug), Base.PipeEndpoint, String, Symbol, String})
precompile(Tuple{HTTP.StreamRequest.var"#2#3"{HTTP.DebugRequest.IODebug{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Array{UInt8, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.DebugRequest.IODebug{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}}})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{Base.var"#readcb_specialized#677", Sockets.TCPSocket, Int64, UInt64})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{HTTP.ConnectionPool.var"#14#15"{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, Array{Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.all), Function, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base._all), typeof(Base.typeinfo_implicit), Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Base.SubString{String}}})
precompile(Tuple{typeof(JSON3.invalid), JSON3.Error, Base.CodeUnits{UInt8, String}, Int64, Type})
precompile(Tuple{typeof(Base.Enums.namemap), Type{JSON3.Error}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, JSON3.Error})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.TopRequest.TopLayer{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, URIs.URI, Array{Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{HTTP.ConnectionRequest.var"##request#1", Nothing, Type, Int64, Base.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{HTTP.ConnectionPool.var"#getconnection##kw", NamedTuple{(:reuse_limit, :iofunction, :reached_redirect_limit), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.ConnectionPool.isvalid), HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64, Int64})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{HTTP.var"#request##kw", NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{HTTP.StreamRequest.var"#2#3"{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
